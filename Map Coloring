# Function to check if the current color assignment is valid
def is_valid_assignment(graph, coloring, node, color):
    # Check all adjacent nodes
    for neighbor in graph[node]:
        if coloring[neighbor] == color:
            return False
    return True


# Backtracking function to solve the map coloring problem
def map_coloring_backtracking(graph, num_colors, coloring, node):
    # If all nodes are assigned a color, return True (solved)
    if node == len(graph):
        return True

    # Try different colors for the current node
    for color in range(num_colors):
        if is_valid_assignment(graph, coloring, node, color):
            coloring[node] = color  # Assign the color
            # Recur to the next node
            if map_coloring_backtracking(graph, num_colors, coloring, node + 1):
                return True
            # If not feasible, reset the color (backtrack)
            coloring[node] = -1

    # No color assignment was valid, return False
    return False


# Function to solve the map coloring problem
def solve_map_coloring(graph, num_colors):
    # Initialize the coloring for each node (-1 means uncolored)
    coloring = [-1] * len(graph)

    # Try to color the graph
    if map_coloring_backtracking(graph, num_colors, coloring, 0):
        return coloring
    else:
        return None  # If no solution exists


# Example usage
if __name__ == "__main__":
    # Graph represented as an adjacency list
    # Each node is a region, and the list represents adjacent regions
    graph = {
        0: [1, 2, 3],  # Region 0 is adjacent to regions 1, 2, and 3
        1: [0, 2],  # Region 1 is adjacent to regions 0 and 2
        2: [0, 1, 3],  # Region 2 is adjacent to regions 0, 1, and 3
        3: [0, 2]  # Region 3 is adjacent to regions 0 and 2
    }

    num_colors = 3  # Number of colors available

    # Solve the map coloring problem
    result = solve_map_coloring(graph, num_colors)

    if result:
        print("Coloring Solution:")
        color_names = ["Red", "Green", "Blue"]  # Color name mapping
        for region, color in enumerate(result):
            print(f"Region {region} is colored {color_names[color]}")
    else:
        print("No solution found with the given number of colors.")
