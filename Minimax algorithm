# Tic-Tac-Toe Minimax Implementation

# Define the constants for the game
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Function to check if the current board state is a winning state
def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] == player:
            return True
        if board[0][i] == board[1][i] == board[2][i] == player:
            return True
    if board[0][0] == board[1][1] == board[2][2] == player:
        return True
    if board[0][2] == board[1][1] == board[2][0] == player:
        return True
    return False

# Function to check if the board is full
def is_board_full(board):
    for row in board:
        for cell in row:
            if cell == EMPTY:
                return False
    return True

# Minimax Algorithm
def minimax(board, depth, is_maximizing_player):
    # Base case: Check for terminal states (win/loss or draw)
    if check_winner(board, PLAYER_X):
        return 10 - depth
    if check_winner(board, PLAYER_O):
        return depth - 10
    if is_board_full(board):
        return 0
    
    # Maximizing player (Player X)
    if is_maximizing_player:
        best = -float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    best = max(best, minimax(board, depth + 1, False))
                    board[i][j] = EMPTY
        return best
    
    # Minimizing player (Player O)
    else:
        best = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    best = min(best, minimax(board, depth + 1, True))
                    board[i][j] = EMPTY
        return best

# Function to find the best move for the current player
def find_best_move(board):
    best_val = -float('inf')
    best_move = (-1, -1)
    
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                move_val = minimax(board, 0, False)
                board[i][j] = EMPTY
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    return best_move

# Function to print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Main function to play the game
def play_game():
    board = [[EMPTY] * 3 for _ in range(3)]
    print("Tic-Tac-Toe Game - Minimax Algorithm\n")
    
    while True:
        print_board(board)
        
        # Player X (Maximizing) move
        print("Player X's turn (Maximizing player)")
        row, col = find_best_move(board)
        board[row][col] = PLAYER_X
        
        if check_winner(board, PLAYER_X):
            print_board(board)
            print("Player X wins!")
            break
        if is_board_full(board):
            print_board(board)
            print("It's a draw!")
            break
        
        # Player O (Minimizing) move
        print("Player O's turn (Minimizing player)")
        row, col = find_best_move(board)
        board[row][col] = PLAYER_O
        
        if check_winner(board, PLAYER_O):
            print_board(board)
            print("Player O wins!")
            break
        if is_board_full(board):
            print_board(board)
            print("It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
