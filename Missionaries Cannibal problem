from collections import deque

def is_valid(state):
    m_left, c_left, m_right, c_right = state
    # Check if the number of missionaries and cannibals is within valid bounds
    if m_left < 0 or c_left < 0 or m_right < 0 or c_right < 0:
        return False
    # Check if cannibals do not outnumber missionaries on either side
    if (m_left > 0 and c_left > m_left) or (m_right > 0 and c_right > m_right):
        return False
    return True

def get_next_states(state, boat_on_left):
    m_left, c_left, m_right, c_right = state
    moves = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]  # Possible moves
    next_states = []

    for m, c in moves:
        if boat_on_left:
            new_state = (m_left - m, c_left - c, m_right + m, c_right + c)
        else:
            new_state = (m_left + m, c_left + c, m_right - m, c_right - c)
        
        if is_valid(new_state):
            next_states.append(new_state)

    return next_states

def solve_missionaries_and_cannibals():
    initial_state = (3, 3, 0, 0)  # (missionaries_left, cannibals_left, missionaries_right, cannibals_right)
    goal_state = (0, 0, 3, 3)
    queue = deque([(initial_state, True, [])])  # (current_state, boat_on_left, path)
    visited = set()

    while queue:
        current_state, boat_on_left, path = queue.popleft()

        if current_state in visited:
            continue
        visited.add(current_state)

        # Check if goal is reached
        if current_state == goal_state:
            return path + [current_state]

        # Generate next states
        for next_state in get_next_states(current_state, boat_on_left):
            queue.append((next_state, not boat_on_left, path + [current_state]))

    return "No solution found"

# Example usage
solution = solve_missionaries_and_cannibals()
if solution != "No solution found":
    print("Solution found:")
    for step in solution:
        print(step)
else:
    print(solution)
